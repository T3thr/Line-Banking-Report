// app/api/webhook/line/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { Client, validateSignature } from '@line/bot-sdk';
import { db } from '@/lib/db/connection';
import { transactions, accounts } from '@/lib/db/schema';
import { eq, desc } from 'drizzle-orm';
import Pusher from 'pusher';
import { BankMessageParser } from '@/lib/utils/message-parser';

const client = new Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN!,
  channelSecret: process.env.LINE_CHANNEL_SECRET!,
});

const pusher = new Pusher({
  appId: process.env.PUSHER_APP_ID!,
  key: process.env.PUSHER_KEY!,
  secret: process.env.PUSHER_SECRET!,
  cluster: process.env.PUSHER_CLUSTER!,
  useTLS: true,
});

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
async function updateAccountBalance(accountNumber: string, amount: number, type: string) {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  const account = await db
    .select()
    .from(accounts)
    .where(eq(accounts.accountNumber, accountNumber))
    .limit(1);

  if (account.length === 0) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ accountNumber ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á accounts
    const lastAccount = await db
      .select({ id: accounts.id })
      .from(accounts)
      .orderBy(desc(accounts.id))
      .limit(1);

    const newAccountId = lastAccount.length > 0 ? lastAccount[0].id + 1 : 1;

    await db.insert(accounts).values({
      id: newAccountId,
      accountNumber,
      accountName: `Account ${accountNumber}`,
      bankName: 'Unknown Bank',
      balance: type === 'deposit' ? amount.toString() : (-amount).toString(),
      isActive: true,
      createdAt: new Date(),
    });
  } else {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
    const currentBalance = parseFloat(account[0].balance || '0');
    const newBalance = type === 'deposit' 
      ? currentBalance + amount 
      : currentBalance - amount;

    await db
      .update(accounts)
      .set({ balance: newBalance.toString() })
      .where(eq(accounts.accountNumber, accountNumber));
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.text();
    const signature = request.headers.get('x-line-signature') || '';

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
    if (!validateSignature(body, process.env.LINE_CHANNEL_SECRET!, signature)) {
      return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });
    }

    const data = JSON.parse(body);
    
    for (const event of data.events) {
      if (event.type === 'message' && event.message.type === 'text') {
        const messageText = event.message.text;
        
        // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
        const transactionData = BankMessageParser.parse(messageText);
        
        if (transactionData) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á transactions
          const lastTransaction = await db
            .select({ id: transactions.id })
            .from(transactions)
            .orderBy(desc(transactions.id))
            .limit(1);

          const newId = lastTransaction.length > 0 ? lastTransaction[0].id + 1 : 1;

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ accountNumber ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
          const [newTransaction] = await db
            .insert(transactions)
            .values({
              id: newId,
              type: transactionData.type,
              accountNumber: transactionData.accountNumber, // ‡πÉ‡∏ä‡πâ accountNumber ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
              amount: transactionData.amount.toString(),
              description: transactionData.description,
              rawMessage: transactionData.rawMessage,
              timestamp: new Date(),
              processed: false,
              createdAt: new Date(),
            })
            .returning();

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
          await updateAccountBalance(transactionData.accountNumber, transactionData.amount, transactionData.type);

          // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö real-time ‡∏ú‡πà‡∏≤‡∏ô Pusher
          await pusher.trigger('transactions', 'new-transaction', {
            transaction: newTransaction,
            accountNumber: transactionData.accountNumber,
          });

          // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô LINE OA ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ accountNumber ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
          await client.replyMessage(event.replyToken, {
            type: 'text',
            text: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\nüí∞ ${transactionData.type === 'deposit' ? '‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô' : '‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô'}: ‡∏ø${transactionData.amount.toLocaleString()}\nüè¶ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${transactionData.accountNumber}`,
          });
        }
      }
    }

    return NextResponse.json({ status: 'ok' });
  } catch (error) {
    console.error('Webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}